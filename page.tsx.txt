"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { CheckCircle, Circle, Play, Download, Shield, Code, Database, Globe, Cog } from "lucide-react"

interface Step {
  id: string
  description: string
  objective: string
  tools: string
  folder: string
  result: string
  completed: boolean
}

interface Phase {
  id: number
  title: string
  icon: React.ReactNode
  color: string
  steps: Step[]
}

export default function ZoneAlfaMegaDashboard() {
  const [phases, setPhases] = useState<Phase[]>([
    {
      id: 1,
      title: "Initialisation & Structuration",
      icon: <Database className="w-5 h-5" />,
      color: "bg-blue-500",
      steps: [
        {
          id: "1.1",
          description: "Création des 4 VM (Ubuntu, Kali, Arch, Ubuntu2) dans VirtualBox",
          objective: "Environnement conteneurisé pour assistants IA",
          tools: "VirtualBox, Vagrant (optionnel)",
          folder: "/vms/",
          result: "4 VM opérationnelles",
          completed: false,
        },
        {
          id: "1.2",
          description: "Attribution de 16 terminaux par VM (code, communication, modif, logs)",
          objective: "Isolation fonctionnelle des tâches",
          tools: ".bashrc, tmux.conf, script VM auto",
          folder: "/vms/*/terminals/",
          result: "64 terminaux configurés",
          completed: false,
        },
        {
          id: "1.3",
          description: "Déploiement initial de MySQL serveur sur Ubuntu VM",
          objective: "Stockage des données IA (assistants)",
          tools: "mysql-server, init_db.sql",
          folder: "/db/core.sql",
          result: "Serveur MySQL opérationnel",
          completed: false,
        },
        {
          id: "1.4",
          description: "Création des tables par assistant (nom, fonctions, scripts, plugins, etc.)",
          objective: "Structuration base IA",
          tools: "schema_assistant.sql",
          folder: "/db/assistants/",
          result: "12 tables IA créées",
          completed: false,
        },
        {
          id: "1.5",
          description: "Configuration du pare-feu par assistant (protection des accès)",
          objective: "Cloisonnement & sécurité",
          tools: "ufw, iptables, fail2ban",
          folder: "/security/firewall/",
          result: "Règles de sécurité initiales actives",
          completed: false,
        },
      ],
    },
    {
      id: 2,
      title: "Intégration des Assistants & Systèmes",
      icon: <Code className="w-5 h-5" />,
      color: "bg-green-500",
      steps: [
        {
          id: "2.1",
          description: "Déploiement des 12 assistants IA (1 par tâche/projet)",
          objective: "Architecture IA fonctionnelle",
          tools: "OpenAI API, Python",
          folder: "/assistants/",
          result: "12 IA interconnectées",
          completed: false,
        },
        {
          id: "2.2",
          description: "Intégration entre assistants via MySQL (communication croisée)",
          objective: "Collaboration intelligente",
          tools: "share_bus.py, sync_bridge.sql",
          folder: "/db/shared/",
          result: "Réseau IA synchronisé",
          completed: false,
        },
        {
          id: "2.3",
          description: "Intégration de Tor et configuration routeur/switch ToR",
          objective: "Anonymisation du trafic",
          tools: "torrc, nyx, bridge.conf",
          folder: "/network/tor/",
          result: "Réseau privé chiffré activé",
          completed: false,
        },
        {
          id: "2.4",
          description: "Ajout de journaux d'activité IA (interactions, scripts lancés)",
          objective: "Historique traçable",
          tools: "journal.log, logger.py",
          folder: "/logs/",
          result: "Log centralisé et versionné",
          completed: false,
        },
        {
          id: "2.5",
          description: "Mise en place d'un point d'accès API (URL)",
          objective: "Contrôle IA à distance",
          tools: "Flask, FastAPI",
          folder: "/api/entrypoint/",
          result: "API publique activée",
          completed: false,
        },
      ],
    },
    {
      id: 3,
      title: "Scripts, Extensions et Bibliothèques",
      icon: <Cog className="w-5 h-5" />,
      color: "bg-purple-500",
      steps: [
        {
          id: "3.1",
          description: "Création d'une bibliothèque partagée de scripts",
          objective: "Réutilisation & partage de code",
          tools: "lib_zonealfamega.py",
          folder: "/lib/",
          result: "Bibliothèque partagée chargée",
          completed: false,
        },
        {
          id: "3.2",
          description: "Intégration automatique d'extensions Firefox, Chrome, VSCode",
          objective: "Automatisation outils IA",
          tools: "Selenium, Bash",
          folder: "/extensions/",
          result: "Navigateurs configurés",
          completed: false,
        },
        {
          id: "3.3",
          description: "Ajout module d'historique web → workflow assistant",
          objective: "Création intelligente de comptes",
          tools: "Puppeteer, Python",
          folder: "/modules/workflows/",
          result: "Automatisation des comptes IA",
          completed: false,
        },
        {
          id: "3.4",
          description: "Liaison Supabase + API Vercel",
          objective: "Authentification, login, données",
          tools: "Supabase, Vercel, OAuth2",
          folder: "/auth/",
          result: "Auth connectée et sécurisée",
          completed: false,
        },
        {
          id: "3.5",
          description: "Synchronisation Dropbox pour data training IA",
          objective: "Historique & renforcement IA",
          tools: "Dropbox SDK, Cron",
          folder: "/training/",
          result: "Training IA distribué",
          completed: false,
        },
      ],
    },
    {
      id: 4,
      title: "Interface de Contrôle Visuel",
      icon: <Globe className="w-5 h-5" />,
      color: "bg-orange-500",
      steps: [
        {
          id: "4.1",
          description: "Interface Web Chatbot centralisée",
          objective: "Contrôle global des assistants",
          tools: "React, Tailwind, Flask API",
          folder: "/frontend/ui/",
          result: "UI centralisée prête",
          completed: false,
        },
        {
          id: "4.2",
          description: "Intégration Visual Studio Code Web complet",
          objective: "Programmation interne directe",
          tools: "Code-Server, Docker",
          folder: "/dev/ide/",
          result: "IDE accessible via navigateur",
          completed: false,
        },
        {
          id: "4.3",
          description: "Ajout bookmark extension → APK téléchargeable Samsung",
          objective: "Générateur de liens→fichiers",
          tools: "apk_converter.py",
          folder: "/tools/apk/",
          result: "Téléchargement direct via lien",
          completed: false,
        },
        {
          id: "4.4",
          description: "Activation commandes assistantes via URL",
          objective: "Pilotage via webhook/API",
          tools: "Webhook Flask",
          folder: "/api/exec/",
          result: "Commandes distantes IA",
          completed: false,
        },
        {
          id: "4.5",
          description: "Fichier de configuration global JSON/YAML",
          objective: "Centralisation des options",
          tools: "config_global.yaml",
          folder: "/configs/",
          result: "Paramétrage unifié du système",
          completed: false,
        },
      ],
    },
    {
      id: 5,
      title: "Finalisation & Déploiement",
      icon: <Shield className="w-5 h-5" />,
      color: "bg-red-500",
      steps: [
        {
          id: "5.1",
          description: "Tests complets de toutes les fonctionnalités",
          objective: "Validation du prototype",
          tools: "pytest, curl, logs",
          folder: "/tests/",
          result: "Validation 100% des modules",
          completed: false,
        },
        {
          id: "5.2",
          description: "Optimisation sécurité : sandboxing, chroot, audit",
          objective: "Renforcement final",
          tools: "AppArmor, auditd",
          folder: "/security/final/",
          result: "Système blindé",
          completed: false,
        },
        {
          id: "5.3",
          description: "Déploiement sur EC2/VPS (serveur distant)",
          objective: "Mise en ligne officielle",
          tools: "Ansible, Git, SSH",
          folder: "/deploy/",
          result: "Prototype fonctionnel déployé",
          completed: false,
        },
        {
          id: "5.4",
          description: "Génération du fichier README + doc système PDF",
          objective: "Document technique final",
          tools: "mkdocs, pdf_gen.py",
          folder: "/docs/",
          result: "Guide complet + version publique",
          completed: false,
        },
        {
          id: "5.5",
          description: "Sauvegarde intégrale + versioning git des scripts & configs",
          objective: "Archivage et clonage facile",
          tools: "Git, rsync, Dropbox",
          folder: "/backups/",
          result: "Clone complet prêt à relancer",
          completed: false,
        },
      ],
    },
  ])

  const [selectedPhase, setSelectedPhase] = useState<number>(1)
  const [selectedStep, setSelectedStep] = useState<string | null>(null)

  const toggleStepCompletion = (phaseId: number, stepId: string) => {
    setPhases(
      phases.map((phase) =>
        phase.id === phaseId
          ? {
              ...phase,
              steps: phase.steps.map((step) => (step.id === stepId ? { ...step, completed: !step.completed } : step)),
            }
          : phase,
      ),
    )
  }

  const getPhaseProgress = (phase: Phase) => {
    const completedSteps = phase.steps.filter((step) => step.completed).length
    return (completedSteps / phase.steps.length) * 100
  }

  const getTotalProgress = () => {
    const totalSteps = phases.reduce((acc, phase) => acc + phase.steps.length, 0)
    const completedSteps = phases.reduce((acc, phase) => acc + phase.steps.filter((step) => step.completed).length, 0)
    return (completedSteps / totalSteps) * 100
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white">
      <div className="container mx-auto p-6">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
            🔷 ZoneAlfaMega Dashboard
          </h1>
          <p className="text-slate-300 mb-4">Système d'assistants IA interconnectés - Gestion de projet complète</p>
          <div className="flex items-center gap-4">
            <div className="flex-1">
              <div className="flex justify-between text-sm mb-1">
                <span>Progression globale</span>
                <span>{Math.round(getTotalProgress())}%</span>
              </div>
              <Progress value={getTotalProgress()} className="h-2" />
            </div>
            <Badge variant="outline" className="bg-green-500/20 text-green-300 border-green-500">
              {phases.reduce((acc, phase) => acc + phase.steps.filter((step) => step.completed).length, 0)} /{" "}
              {phases.reduce((acc, phase) => acc + phase.steps.length, 0)} étapes
            </Badge>
          </div>
        </div>

        <Tabs value={selectedPhase.toString()} onValueChange={(value) => setSelectedPhase(Number.parseInt(value))}>
          <TabsList className="grid w-full grid-cols-5 mb-6 bg-slate-800">
            {phases.map((phase) => (
              <TabsTrigger
                key={phase.id}
                value={phase.id.toString()}
                className="flex items-center gap-2 data-[state=active]:bg-slate-700"
              >
                {phase.icon}
                <span className="hidden sm:inline">Phase {phase.id}</span>
              </TabsTrigger>
            ))}
          </TabsList>

          {phases.map((phase) => (
            <TabsContent key={phase.id} value={phase.id.toString()}>
              <Card className="bg-slate-800/50 border-slate-700">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`p-2 rounded-lg ${phase.color}`}>{phase.icon}</div>
                      <div>
                        <CardTitle className="text-xl">
                          Phase {phase.id} - {phase.title}
                        </CardTitle>
                        <CardDescription className="text-slate-400">
                          {phase.steps.length} étapes • {phase.steps.filter((s) => s.completed).length} complétées
                        </CardDescription>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-green-400">{Math.round(getPhaseProgress(phase))}%</div>
                      <Progress value={getPhaseProgress(phase)} className="w-24 h-2" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {phase.steps.map((step) => (
                      <Card
                        key={step.id}
                        className={`bg-slate-700/50 border-slate-600 cursor-pointer transition-all hover:bg-slate-700/70 ${
                          selectedStep === step.id ? "ring-2 ring-blue-500" : ""
                        }`}
                        onClick={() => setSelectedStep(selectedStep === step.id ? null : step.id)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start gap-3">
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                toggleStepCompletion(phase.id, step.id)
                              }}
                              className="mt-1"
                            >
                              {step.completed ? (
                                <CheckCircle className="w-5 h-5 text-green-500" />
                              ) : (
                                <Circle className="w-5 h-5 text-slate-400" />
                              )}
                            </button>
                            <div className="flex-1">
                              <div className="flex items-center justify-between mb-2">
                                <Badge variant="outline" className="bg-blue-500/20 text-blue-300 border-blue-500">
                                  {step.id}
                                </Badge>
                                <Badge
                                  variant={step.completed ? "default" : "secondary"}
                                  className={step.completed ? "bg-green-500" : "bg-slate-600"}
                                >
                                  {step.completed ? "Terminé" : "En attente"}
                                </Badge>
                              </div>
                              <h4 className="font-semibold mb-1">{step.description}</h4>
                              <p className="text-sm text-slate-400 mb-2">{step.objective}</p>

                              {selectedStep === step.id && (
                                <div className="mt-4 p-4 bg-slate-800/50 rounded-lg space-y-3">
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                      <h5 className="font-medium text-blue-300 mb-1">Outils requis</h5>
                                      <p className="text-sm text-slate-300">{step.tools}</p>
                                    </div>
                                    <div>
                                      <h5 className="font-medium text-purple-300 mb-1">Dossier/Fichier</h5>
                                      <code className="text-sm bg-slate-900 px-2 py-1 rounded text-green-300">
                                        {step.folder}
                                      </code>
                                    </div>
                                  </div>
                                  <div>
                                    <h5 className="font-medium text-orange-300 mb-1">Résultat attendu</h5>
                                    <p className="text-sm text-slate-300">{step.result}</p>
                                  </div>
                                  <div className="flex gap-2 pt-2">
                                    <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                                      <Play className="w-4 h-4 mr-2" />
                                      Générer Script
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      className="bg-slate-700 text-white border-slate-600"
                                    >
                                      <Download className="w-4 h-4 mr-2" />
                                      Télécharger Config
                                    </Button>
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          ))}
        </Tabs>

        {/* Actions rapides */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-4 gap-4">
          <Button className="bg-green-600 hover:bg-green-700 h-12">
            <Code className="w-5 h-5 mr-2" />
            Générer tous les scripts
          </Button>
          <Button className="bg-purple-600 hover:bg-purple-700 h-12">
            <Database className="w-5 h-5 mr-2" />
            Créer structure dossiers
          </Button>
          <Button className="bg-orange-600 hover:bg-orange-700 h-12">
            <Shield className="w-5 h-5 mr-2" />
            Config sécurité Tor
          </Button>
          <Button className="bg-blue-600 hover:bg-blue-700 h-12">
            <Globe className="w-5 h-5 mr-2" />
            Interface Chatbot
          </Button>
        </div>
      </div>
    </div>
  )
}
